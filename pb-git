#!/usr/bin/env python2.7
import pb_git.cmds
import pb_git.os
import argparse
import os
import sys
import warnings

PB_GIT_DEFAULT_MIRRORS_BASE_DEFAULT = '/lustre/hpcprod/cdunn/git-mirrors-client/smrtanalysis/bioinformatics'
PB_GIT_DEFAULT_MIRRORS_BASE_DEFAULT = 'git://gitmirror.nanofluidics.com'

def get_default_mirrors_base():
    base = os.environ.get('PB_GIT_DEFAULT_MIRRORS_BASE', PB_GIT_DEFAULT_MIRRORS_BASE_DEFAULT)
    # '' => do not use a mirror.
    # In case we use a directory:
    if base and (':' not in base) and (os.path.abspath(base) in os.path.abspath(os.getcwd())):
        warnings.warn('Cannot use base above cwd. Ignoring. ({!r} is in {!r})'.format(base, os.getcwd()))
        base = ''
    # Check if a repo is reachable:
    if base and pb_git.os.system('git ls-remote --heads {}/pith > /dev/null 2>&1'.format(base), timeout=2):
        warnings.warn('Git mirrors base is unreachable. Ignoring. ({!r})'.format(base))
        base = ''
    return base

try:
    PB_GIT_DEFAULT_MIRRORS_BASE = get_default_mirrors_base()
except:
    # To be as robust as possible.
    PB_GIT_DEFAULT_MIRRORS_BASE = ''
#warnings.warn('base={!r}'.format(PB_GIT_DEFAULT_MIRRORS_BASE))


def main(argv):
    parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    pb_git.cmds.init_argparse(parser)
    subparsers = parser.add_subparsers()

    p = subparsers.add_parser('checkout',
            help='Checkout all repos described by *.ini files, cloning and fetching as needed.',
            description='Checkout all repos described by *.ini files, cloning and fetching as needed. This will put the repos into "detached HEAD" state, just like git-submodules. Someday, we might add branch support.',
            #aliases=['co'],
            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            )
    p.add_argument('--mirrors',
            default=PB_GIT_DEFAULT_MIRRORS_BASE,
            help='Clone/fetch from the mirror first. Use this path, plus ext/pi etc. if a directory. [default can be over-ridden via PB_GIT_DEFAULT_MIRRORS_BASE]',
            )
    p.set_defaults(func=pb_git.cmds.checkout)

    p = subparsers.add_parser('prepare',
            help='Prepare to submit the current changes.',
            description='Prepare to submit the current changes, and `p4 edit` them. Work with intermediate *.ini.bak files. Users may run this command as often as they like. It is perfectly safe always. They must then run `p4 submit` themselves.',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            )
    p.add_argument('--no-verify',
            action='store_true',
            help='Do not perform the verify step.',
            )
    p.set_defaults(func=pb_git.cmds.prepare)

    p = subparsers.add_parser('verify',
            help='Prove that the commit is actually available from a fresh checkout.',
            description='This will become faster when we have caching. Note that `prepare` can call this itself.',
            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            )
    p.set_defaults(func=pb_git.cmds.verify)

    args = parser.parse_args(argv[1:])
    args.func(args)

main(sys.argv)
